#!/usr/bin/with-contenv bash
# shellcheck shell=bash

# create our folders
mkdir -p \
    /run/unifi/work/ROOT \
    /config/{data,logs}

# create symlinks for config
symlinks=( \
/usr/lib/unifi/data \
/usr/lib/unifi/logs )

for i in "${symlinks[@]}"; do
    if [[ -L "$i" && ! "$i" -ef /config/"$(basename "$i")"  ]]; then
        unlink "$i"
    fi
    if [[ ! -L "$i" ]]; then
        ln -s /config/"$(basename "$i")" "$i"
    fi
done

if [[ -L "/usr/lib/unifi/run" && ! "/usr/lib/unifi/run" -ef "/run/unifi"  ]]; then
    unlink "/usr/lib/unifi/run"
fi
if [[ ! -L "/usr/lib/unifi/run" ]]; then
    ln -s "/run/unifi" "/usr/lib/unifi/run"
fi

if [[ ! -e /config/data/system.properties ]]; then
    if [[ -z "${MONGO_HOST}" ]]; then
        echo "*** No MONGO_HOST set, cannot configure database settings. ***"
        sleep infinity
    else
        IFS=',' read -r -a hosts_array <<< "$MONGO_HOST"
        IFS=',' read -r -a ports_array <<< "$MONGO_PORT"
        if [ "${#ports_array[@]}" -eq 1 ]; then
            port="${ports_array[0]}"
            ports_array=()
            for _ in "${hosts_array[@]}"; do
                ports_array+=("$port")
            done
        fi
        if [ "${#hosts_array[@]}" -ne "${#ports_array[@]}" ]; then
            echo "*** The number of MONGO_HOST does not match the number of MONGO_PORT. ***"
            sleep infinity
        fi
        for i in "${!hosts_array[@]}"; do
            host="${hosts_array[$i]}"
            port="${ports_array[$i]}"
            echo "*** Waiting for host ${host}:${port} to be reachable. ***"
            DBCOUNT=0
            while true; do
                if nc -w1 "${host}" "${port}" >/dev/null 2>&1; then
                    break
                fi
                DBCOUNT=$((DBCOUNT+1))
                if [[ ${DBCOUNT} -gt 6 ]]; then
                    echo "*** Defined MONGO_HOST ${host} is not reachable, cannot proceed. ***"
                    sleep infinity
                fi
                sleep 5
            done
        done
        mongo_hosts=""
        for i in "${!hosts_array[@]}"; do
            mongo_hosts+="${hosts_array[$i]}:${ports_array[$i]},"
        done
        mongo_hosts="${mongo_hosts%,}"
        sed -i "s/~MONGO_USER~/${MONGO_USER}/" /defaults/system.properties
        sed -i "s/~MONGO_HOSTS~/${mongo_hosts}/" /defaults/system.properties
        sed -i "s/~MONGO_DBNAME~/${MONGO_DBNAME}/" /defaults/system.properties
        sed -i "s/~MONGO_PASS~/${MONGO_PASS}/" /defaults/system.properties
        if [[ "${MONGO_TLS,,}" = "true" ]]; then
            sed -i "s/~MONGO_TLS~/true/" /defaults/system.properties
        else
            sed -i "s/~MONGO_TLS~/false/" /defaults/system.properties
        fi
        if [[ -z "${MONGO_AUTHSOURCE}" ]]; then
            sed -i "s/~MONGO_AUTHSOURCE~//" /defaults/system.properties
        else
            sed -i "s/~MONGO_AUTHSOURCE~/\&authSource=${MONGO_AUTHSOURCE}/" /defaults/system.properties
        fi
        if [[ -z "${MONGO_REPLICA_SET_NAME}" ]]; then
            sed -i "s/~MONGO_REPLICA_SET_NAME~//" /defaults/system.properties
        else
            if [[ "${#hosts_array[@]}" -le 1 ]]; then
                echo "*** MONGO_REPLICA_SET_NAME is defined but there is only one host in MONGO_HOST. ***"
                sleep infinity
            fi
            sed -i "s/~MONGO_REPLICA_SET_NAME~/\&replicaSet=${MONGO_REPLICA_SET_NAME}/" /defaults/system.properties
        fi
        cp /defaults/system.properties /config/data
    fi
fi

# generate key
if [[ ! -f /config/data/keystore ]]; then
    keytool -genkey -keyalg RSA -alias unifi -keystore /config/data/keystore \
    -storepass aircontrolenterprise -keypass aircontrolenterprise -validity 3650 \
    -keysize 4096 -dname "cn=unifi" -ext san=dns:unifi
fi

# permissions
lsiown -R abc:abc \
	/config \
	/run/unifi

lsiown abc:abc \
    /config/data/keystore
